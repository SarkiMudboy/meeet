// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS(
  SELECT 1 FROM users WHERE email = ?
)
`

func (q *Queries) CheckUserExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAuth = `-- name: CreateAuth :execresult
INSERT INTO auth (
 user_id, password_hash 
) VALUES ( ?, ? )
`

type CreateAuthParams struct {
	UserID       uint16
	PasswordHash sql.NullString
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAuth, arg.UserID, arg.PasswordHash)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  email, password
) VALUES (
  ?, ?
)
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Email, arg.Password)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID sql.NullInt16) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const deleteUserAuth = `-- name: DeleteUserAuth :exec
DELETE FROM auth
WHERE auth_id = ? OR user_id = ?
`

type DeleteUserAuthParams struct {
	AuthID sql.NullInt16
	UserID uint16
}

func (q *Queries) DeleteUserAuth(ctx context.Context, arg DeleteUserAuthParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserAuth, arg.AuthID, arg.UserID)
	return err
}

const getAuth = `-- name: GetAuth :one
SELECT a.auth_id, a.password_hash, a.session_token, a.csrf_token
FROM auth a INNER JOIN users u
ON a.user_id = u.user_id
WHERE u.email = ?
`

type GetAuthRow struct {
	AuthID       sql.NullInt16
	PasswordHash sql.NullString
	SessionToken sql.NullString
	CsrfToken    sql.NullString
}

func (q *Queries) GetAuth(ctx context.Context, email string) (GetAuthRow, error) {
	row := q.db.QueryRowContext(ctx, getAuth, email)
	var i GetAuthRow
	err := row.Scan(
		&i.AuthID,
		&i.PasswordHash,
		&i.SessionToken,
		&i.CsrfToken,
	)
	return i, err
}

const retrieveAuth = `-- name: RetrieveAuth :one
SELECT a.auth_id, a.password_hash, a.session_token, a.csrf_token
FROM auth a
WHERE a.csrf_token = ? AND a.session_token = ?
`

type RetrieveAuthParams struct {
	CsrfToken    sql.NullString
	SessionToken sql.NullString
}

type RetrieveAuthRow struct {
	AuthID       sql.NullInt16
	PasswordHash sql.NullString
	SessionToken sql.NullString
	CsrfToken    sql.NullString
}

func (q *Queries) RetrieveAuth(ctx context.Context, arg RetrieveAuthParams) (RetrieveAuthRow, error) {
	row := q.db.QueryRowContext(ctx, retrieveAuth, arg.CsrfToken, arg.SessionToken)
	var i RetrieveAuthRow
	err := row.Scan(
		&i.AuthID,
		&i.PasswordHash,
		&i.SessionToken,
		&i.CsrfToken,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users 
SET email = ?, password = ?
WHERE user_id = ?
`

type UpdateUserParams struct {
	Email    string
	Password string
	UserID   sql.NullInt16
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser, arg.Email, arg.Password, arg.UserID)
}

const updateUserAuth = `-- name: UpdateUserAuth :execresult
UPDATE auth 
SET session_token= ?, password_hash = ?, csrf_token = ?
WHERE auth_id = ?
`

type UpdateUserAuthParams struct {
	SessionToken sql.NullString
	PasswordHash sql.NullString
	CsrfToken    sql.NullString
	AuthID       sql.NullInt16
}

func (q *Queries) UpdateUserAuth(ctx context.Context, arg UpdateUserAuthParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUserAuth,
		arg.SessionToken,
		arg.PasswordHash,
		arg.CsrfToken,
		arg.AuthID,
	)
}

const getUser = `-- name: getUser :one
SELECT user_id, email, password FROM users
WHERE user_id = ? LIMIT 1
`

type getUserRow struct {
	UserID   sql.NullInt16
	Email    string
	Password string
}

func (q *Queries) getUser(ctx context.Context, userID sql.NullInt16) (getUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i getUserRow
	err := row.Scan(&i.UserID, &i.Email, &i.Password)
	return i, err
}

const getUserAuth = `-- name: getUserAuth :one
SELECT u.user_id, u.email, u.password, a.password_hash, a.session_token, a.csrf_token
FROM users u INNER JOIN auth a 
ON u.user_id = a.user_id
WHERE u.email = ? LIMIT 1
`

type getUserAuthRow struct {
	UserID       sql.NullInt16
	Email        string
	Password     string
	PasswordHash sql.NullString
	SessionToken sql.NullString
	CsrfToken    sql.NullString
}

func (q *Queries) GetUserAuth(ctx context.Context, email string) (getUserAuthRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAuth, email)
	var i getUserAuthRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Password,
		&i.PasswordHash,
		&i.SessionToken,
		&i.CsrfToken,
	)
	return i, err
}
